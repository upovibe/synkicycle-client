/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NetworkRouteImport } from './routes/network'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NetworkIndexRouteImport } from './routes/network/index'
import { Route as NetworkMessagesRouteImport } from './routes/network/messages'
import { Route as NetworkMatchesRouteImport } from './routes/network/matches'
import { Route as NetworkConnectionsRouteImport } from './routes/network/connections'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const NetworkRoute = NetworkRouteImport.update({
  id: '/network',
  path: '/network',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NetworkIndexRoute = NetworkIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NetworkRoute,
} as any)
const NetworkMessagesRoute = NetworkMessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => NetworkRoute,
} as any)
const NetworkMatchesRoute = NetworkMatchesRouteImport.update({
  id: '/matches',
  path: '/matches',
  getParentRoute: () => NetworkRoute,
} as any)
const NetworkConnectionsRoute = NetworkConnectionsRouteImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => NetworkRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/network': typeof NetworkRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/network/connections': typeof NetworkConnectionsRoute
  '/network/matches': typeof NetworkMatchesRoute
  '/network/messages': typeof NetworkMessagesRoute
  '/network/': typeof NetworkIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/network/connections': typeof NetworkConnectionsRoute
  '/network/matches': typeof NetworkMatchesRoute
  '/network/messages': typeof NetworkMessagesRoute
  '/network': typeof NetworkIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/network': typeof NetworkRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/network/connections': typeof NetworkConnectionsRoute
  '/network/matches': typeof NetworkMatchesRoute
  '/network/messages': typeof NetworkMessagesRoute
  '/network/': typeof NetworkIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/network'
    | '/auth/login'
    | '/auth/register'
    | '/network/connections'
    | '/network/matches'
    | '/network/messages'
    | '/network/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/network/connections'
    | '/network/matches'
    | '/network/messages'
    | '/network'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/network'
    | '/auth/login'
    | '/auth/register'
    | '/network/connections'
    | '/network/matches'
    | '/network/messages'
    | '/network/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  NetworkRoute: typeof NetworkRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/network': {
      id: '/network'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof NetworkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/network/': {
      id: '/network/'
      path: '/'
      fullPath: '/network/'
      preLoaderRoute: typeof NetworkIndexRouteImport
      parentRoute: typeof NetworkRoute
    }
    '/network/messages': {
      id: '/network/messages'
      path: '/messages'
      fullPath: '/network/messages'
      preLoaderRoute: typeof NetworkMessagesRouteImport
      parentRoute: typeof NetworkRoute
    }
    '/network/matches': {
      id: '/network/matches'
      path: '/matches'
      fullPath: '/network/matches'
      preLoaderRoute: typeof NetworkMatchesRouteImport
      parentRoute: typeof NetworkRoute
    }
    '/network/connections': {
      id: '/network/connections'
      path: '/connections'
      fullPath: '/network/connections'
      preLoaderRoute: typeof NetworkConnectionsRouteImport
      parentRoute: typeof NetworkRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface NetworkRouteChildren {
  NetworkConnectionsRoute: typeof NetworkConnectionsRoute
  NetworkMatchesRoute: typeof NetworkMatchesRoute
  NetworkMessagesRoute: typeof NetworkMessagesRoute
  NetworkIndexRoute: typeof NetworkIndexRoute
}

const NetworkRouteChildren: NetworkRouteChildren = {
  NetworkConnectionsRoute: NetworkConnectionsRoute,
  NetworkMatchesRoute: NetworkMatchesRoute,
  NetworkMessagesRoute: NetworkMessagesRoute,
  NetworkIndexRoute: NetworkIndexRoute,
}

const NetworkRouteWithChildren =
  NetworkRoute._addFileChildren(NetworkRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  NetworkRoute: NetworkRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
